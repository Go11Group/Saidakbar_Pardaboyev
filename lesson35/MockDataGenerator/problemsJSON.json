[
    {
        "Id": "1",
        "Problem_num": 1,
        "Title": "Two Sum",
        "Status": "Easy",
        "Description": "Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to the target.",
        "Examples": [
            "Example 1:\n\nInput: nums = [2,7,11,15], target = 9\nOutput: [0,1]\nExplanation: Because nums[0] + nums[1] == 9, we return [0, 1].",
            "Example 2:\n\nInput: nums = [3,2,4], target = 6\nOutput: [1,2]\nExplanation: Because nums[1] + nums[2] == 6, we return [1, 2]."
        ],
        "Constraints": [
            "1 <= nums.length <= 3 * 10^4",
            "-10^4 <= nums[i] <= 10^4",
            "2 <= k <= 10^4"
        ]
    },
    {
        "Id": "2",
        "Problem_num": 2,
        "Title": "Add Two Numbers",
        "Status": "Medium",
        "Description": "You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order, and each of their nodes contains a single digit. Add the two numbers and return the sum as a linked list.",
        "Examples": [
            "Example 1:\n\nInput: l1 = [2,4,3], l2 = [5,6,4]\nOutput: [7,0,8]\nExplanation: 342 + 465 = 807.",
            "Example 2:\n\nInput: l1 = [0], l2 = [0]\nOutput: [0]\nExplanation: 0 + 0 = 0."
        ],
        "Constraints": [
            "The number of nodes in each linked list is in the range [1, 100].",
            "0 <= Node.val <= 9",
            "It is guaranteed that the list represents a number that does not have leading zeros."
        ]
    },
    {
        "Id": "3",
        "Problem_num": 3,
        "Title": "Longest Substring Without Repeating Characters",
        "Status": "Medium",
        "Description": "Given a string s, find the length of the longest substring without repeating characters.",
        "Examples": [
            "Example 1:\n\nInput: s = \"abcabcbb\"\nOutput: 3\nExplanation: The answer is \"abc\", with the length of 3.",
            "Example 2:\n\nInput: s = \"bbbbb\"\nOutput: 1\nExplanation: The answer is \"b\", with the length of 1."
        ],
        "Constraints": [
            "0 <= s.length <= 5 * 10^4",
            "s consists of English letters, digits, symbols and spaces."
        ]
    },
    {
        "Id": "4",
        "Problem_num": 4,
        "Title": "Median of Two Sorted Arrays",
        "Status": "Hard",
        "Description": "Given two sorted arrays nums1 and nums2 of size m and n respectively, return the median of the two sorted arrays.\nThe overall run time complexity should be O(log (m+n)).",
        "Examples": [
            "Example 1:\n\nInput: nums1 = [1,3], nums2 = [2]\nOutput: 2.00000\nExplanation: merged array = [1,2,3] and median is 2.\n",
            "Example 2:\n\nInput: nums1 = [1,2], nums2 = [3,4]\nOutput: 2.50000\nExplanation: merged array = [1,2,3,4] and median is (2 + 3) / 2 = 2.5.\n"
        ],
        "Constraints": [       
            "nums1.length == m",
            "nums2.length == n",
            "0 <= m <= 1000",
            "0 <= n <= 1000",
            "1 <= m + n <= 2000",
            "-10^6 <= nums1[i], nums2[i] <= 10^6"
        ]
    },
    {
        "Problem_num": 5,
        "Title": "Longest Palindromic Substring",
        "Status": "Medium",
        "Description": "Given a string s, return the longest palindromic substring in s.",
        "Examples": [
            "Example 1:\n\nInput: s = 'babad'\nOutput: 'bab'\nExplanation: 'aba' is also a valid answer.\n",
            "Example 2:\n\nInput: s = 'cbbd'\nOutput: 'bb'\n"
        ],
        "Constraints": [
            "1 <= s.length <= 1000",
            "s consist of only digits and English letters."
        ]
    },
    {
        "Id": "6",
        "Problem_num": 6,
        "Title": "Zigzag Conversion",
        "Status": "Hard",
        "Description": "The string 'PAYPALISHIRING' is written in a zigzag pattern on a given number of rows like this: (you may want to display this pattern in a fixed font for better legibility)\n\nP   A   H   N\nA P L S I I G\nY   I   R\n\nAnd then read line by line: 'PAHNAPLSIIGYIR'\n\nWrite the code that will take a string and make this conversion given a number of rows:\n\nstring convert(string s, int numRows);\n",
        "Examples": [
            "Example 1:\n\nInput: s = 'PAYPALISHIRING', numRows = 3\nOutput: 'PAHNAPLSIIGYIR'\n",
            "Example 2:\n\nInput: s = 'PAYPALISHIRING', numRows = 4\nOutput: 'PINALSIGYAHRPI'\nExplanation:\nP     I    N\nA   L S  I G\nY A   H R\nP     I\n",
            "Example 3:\n\nInput: s = 'A', numRows = 1\nOutput: 'A'\n"
        ],
        "Constraints": [
            "1 <= s.length <= 1000",
            "s consists of English letters (lower-case and upper-case), ',' and '.'.",
            "1 <= numRows <= 1000"
        ]
    },
    {
        "Id": "7",
        "Problem_num": 7,
        "Title": "Reverse Integer",
        "Status": "Medium",
        "Description": "Given a signed 32-bit integer x, return x with its digits reversed. If reversing x causes the value to go outside the signed 32-bit integer range [-231, 231 - 1], then return 0.\n\nAssume the environment does not allow you to store 64-bit integers (signed or unsigned).",
        "Examples": [
            "Example 1:\n\nInput: x = 123\nOutput: 321\n",
            "Example 2:\n\nInput: x = -123\nOutput: -321\n",
            "Example 3:\n\nInput: x = 120\nOutput: 21\n"
        ],
        "Constraints": [
            "-231 <= x <= 231 - 1"
        ]
    },
    {
        "Id": "8",
        "Problem_num": 8,
        "Title": "String to Integer (atoi)",
        "Status": "Medium",
        "Description": "Implement the myAtoi(string s) function, which converts a string to a 32-bit signed integer.\n\nThe algorithm for myAtoi(string s) is as follows:\n\nWhitespace: Ignore any leading whitespace ('').\nSignedness: Determine the sign by checking if the next character is '-' or '+', assuming positivity is neither present.\nConversion: Read the integer by skipping leading zeros until a non-digit character is encountered or the end of the string is reached. If no digits were read, then the result is 0.\nRounding: If the integer is out of the 32-bit signed integer range [-231, 231 - 1], then round the integer to remain in the range. Specifically, integers less than -231 should be rounded to -231, and integers greater than 231 - 1 should be rounded to 231 - 1.\n\nReturn the integer as the final result.\n",
        "Examples": [
            "Example 1:\n\nInput: s = '42'\nOutput: 42\n\nExplanation:\n\nThe underlined characters are what is read in and the caret is the current reader position.\nStep 1: '42' (no characters read because there is no leading whitespace)\n\t\t^\nStep 2: '42' (no characters read because there is neither a '-' nor '+')\n\t\t^\nStep 3: '42' ('42' is read in)\n",
            "Example 2:\n\nInput: s = ' -042'\nOutput: -42\nExplanation:\n\nStep 1: '   -042' (leading whitespace is read and ignored)\n\t\t^\nStep 2: '   -042' ('-' is read, so the result should be negative)\n\t\t^\nStep 3: '   -042' ('042' is read in, leading zeros ignored in the result)\n"
        ],
        "Constraints": [
            "0 <= s.length <= 200",
            "s consists of English letters (lower-case and upper-case), digits (0-9), ' ', '+', '-', and '.'."        ]
    },
    {
        "Id": "9",
        "Problem_num": 9,
        "Title": "Palindrome Number",
        "Status": "Easy",
        "Description": "Given an integer x, return true if x is a palindrome, and false otherwise.",
        "Examples": [
            "Example 1:\n\nInput: x = 121\nOutput: true\nExplanation: 121 reads as 121 from left to right and from right to left.\n",
            "Example 2:\n\nInput: x = -121\nOutput: false\nExplanation: From left to right, it reads -121. From right to left, it becomes 121-. Therefore it is not a palindrome.\n",
            "Example 3:\n\nInput: x = 10\nOutput: false\nExplanation: Reads 01 from right to left. Therefore it is not a palindrome.\n"
        ],
        "Constraints": [
            "-231 <= x <= 231 - 1"
        ]
    },
    {
        "Id": "10",
        "Problem_num": 10,
        "Title": "Regular Expression Matching",
        "Status": "Hard",
        "Description": "Given an input string s and a pattern p, implement regular expression matching with support for '.' and '*' where:\n\t'.' Matches any single character.​​​​\n\t'*' Matches zero or more of the preceding element.\n\nThe matching should cover the entire input string (not partial).",
        "Examples": [
            "Example 1:\n\nInput: s = 'aa', p = 'a'\nOutput: false\nExplanation: 'a' does not match the entire string 'aa'.\n",
            "Example 2:\n\nInput: s = 'aa'\n, p = 'a*'\nOutput: true\nExplanation: '*' means zero or more of the preceding element, 'a'. Therefore, by repeating 'a' once, it becomes 'aa'.\n"
        ],
        "Constraints": [
            "1 <= s.length <= 20",
            "1 <= p.length <= 20",
            "s contains only lowercase English letters.",
            "p contains only lowercase English letters, '.', and '*'.",
            "t is guaranteed for each appearance of the character '*', there will be a previous valid character to match."
        ]
    },
    {
        "Id": "11",
        "Problem_num": 11,
        "Title": "Container With Most Water",
        "Status": "Medium",
        "Description": "You are given an integer array height of length n. There are n vertical lines drawn such that the two endpoints of the ith line are (i, 0) and (i, height[i]).\n\nFind two lines that together with the x-axis form a container, such that the container contains the most water.\n\nReturn the maximum amount of water a container can store.\n\nNotice that you may not slant the container.\n",
        "Examples": [
            "Input: height = [1,8,6,2,5,4,8,3,7]\nOutput: 49\nExplanation: The above vertical lines are represented by array [1,8,6,2,5,4,8,3,7]. In this case, the max area of water (blue section) the container can contain is 49.",
            "Example 2:\n\nInput: height = [1,1]\nOutput: 1\n"
        ],
        "Constraints": [
            "n == height.length",
            "2 <= n <= 105",
            "0 <= height[i] <= 10^4"
        ]
    },
    {
        "Id": "12",
        "Problem_num": 12,
        "Title": "Integer to Roman",
        "Status": "Medium",
        "Description": "Seven different symbols represent Roman numerals with the following values:\nSymbol  Value\nI       1\nV       5\nX       10\nL       50\nC       100\nD       500\nM       1000\n\nRoman numerals are formed by appending the conversions of decimal place values from highest to lowest. Converting a decimal place value into a Roman numeral has the following rules:\n\nIf the value does not start with 4 or 9, select the symbol of the maximal value that can be subtracted from the input, append that symbol to the result, subtract its value, and convert the remainder to a Roman numeral.\n\nIf the value starts with 4 or 9, use the subtractive form representing one symbol subtracted from the following symbol. For example, 4 is 1 ('I') less than 5 ('V'): 'IV' and 9 is 1 ('I') less than 10 ('X'): 'IX'. Only the following subtractive forms are used: 4 ('IV'), 9 ('IX'), 40 ('XL'), 90 ('XC'), 400 ('CD') and 900 ('CM').\n\nOnly powers of 10 ('I', 'X', 'C', 'M') can be appended consecutively at most 3 times to represent multiples of 10. You cannot append 5 ('V'), 50 ('L'), or 500 ('D') multiple times. If you need to append a symbol 4 times, use the subtractive form.\n\nGiven an integer, convert it to a Roman numeral.",
        "Examples": [
            "Example 1:\n\nInput: nums = [2,7,11,15], target = 9\nOutput: [0,1]\nExplanation: Because nums[0] + nums[1] == 9, we return [0, 1].",
            "Example 2:\n\nInput: num = 58\n\nOutput: 'LVIII'\n\nExplanation:\n\n50 = L\n8 = VIII\n\n"
        ],
        "Constraints": [
            "1 <= num <= 3999"
        ]
    },
    {
        "Id": "13",
        "Problem_num": 13,
        "Title": "Roman to Integer",
        "Status": "Easy",
        "Description": "Seven different symbols represent Roman numerals with the following values:\nSymbol  Value\nI       1\nV       5\nX       10\nL       50\nC       100\nD       500\nM       1000\n\nRoman numerals are formed by appending the conversions of decimal place values from highest to lowest. Converting a decimal place value into a Roman numeral has the following rules:\n\nIf the value does not start with 4 or 9, select the symbol of the maximal value that can be subtracted from the input, append that symbol to the result, subtract its value, and convert the remainder to a Roman numeral.\n\nIf the value starts with 4 or 9, use the subtractive form representing one symbol subtracted from the following symbol. For example, 4 is 1 ('I') less than 5 ('V'): 'IV' and 9 is 1 ('I') less than 10 ('X'): 'IX'. Only the following subtractive forms are used: 4 ('IV'), 9 ('IX'), 40 ('XL'), 90 ('XC'), 400 ('CD') and 900 ('CM').\n\nOnly powers of 10 ('I', 'X', 'C', 'M') can be appended consecutively at most 3 times to represent multiples of 10. You cannot append 5 ('V'), 50 ('L'), or 500 ('D') multiple times. If you need to append a symbol 4 times, use the subtractive form.\n\nGiven an integer, convert it to a Roman numeral.",
        "Examples": [
            "Example 1:\n\nInput: s = 'III'\nOutput: 3\nExplanation: III = 3.\n",
            "Example 2:\n\nInput: s = 'LVIII'\nOutput: 58\nExplanation: L = 50, V= 5, III = 3.\n"
        ],
        "Constraints": [
            "1 <= s.length <= 15",
            "s contains only the characters ('I', 'V', 'X', 'L', 'C', 'D', 'M').",
            "It is guaranteed that s is a valid roman numeral in the range [1, 3999]."
        ]
    },
    {
        "Id": "14",
        "Problem_num": 14,
        "Title": "Longest Common Prefix",
        "Status": "Easy",
        "Description": "Write a function to find the longest common prefix string amongst an array of strings.\nIf there is no common prefix, return an empty string ''.",
        "Examples": [
            "Example 1:\nInput: strs = ['flower','flow','flight']\nOutput: 'fl'\n",
            "Example 2:\n\nInput: strs = ['dog','racecar','car']\nOutput: ''\nExplanation: There is no common prefix among the input strings.\n"
        ],
        "Constraints": [
            "1 <= strs.length <= 200",
            "0 <= strs[i].length <= 200",
            "strs[i] consists of only lowercase English letters."
        ]
    },
    {
        "Id": "15",
        "Problem_num": 15,
        "Title": "3Sum",
        "Status": "Medium",
        "Description": "Given an integer array nums, return all the triplets [nums[i], nums[j], nums[k]] such that i != j, i != k, and j != k, and nums[i] + nums[j] + nums[k] == 0.\n\nNotice that the solution set must not contain duplicate triplets.",
        "Examples": [
            "Example 1:\n\nInput: nums = [-1,0,1,2,-1,-4]\nOutput: [[-1,-1,2],[-1,0,1]]\nExplanation: \nnums[0] + nums[1] + nums[2] = (-1) + 0 + 1 = 0.\nnums[1] + nums[2] + nums[4] = 0 + 1 + (-1) = 0.\nnums[0] + nums[3] + nums[4] = (-1) + 2 + (-1) = 0.\nThe distinct triplets are [-1,0,1] and [-1,-1,2].\nNotice that the order of the output and the order of the triplets does not matter.\n",
            "Example 2:\n\nInput: nums = [0,1,1]\nOutput: []\nExplanation: The only possible triplet does not sum up to 0.\n"
        ],
        "Constraints": [
            "3 <= nums.length <= 3000",
            "-10^5 <= nums[i] <= 10^5"
        ]
    },
    {
        "Id": "16",
        "Problem_num": 16,
        "Title": "3Sum Closest",
        "Status": "Medium",
        "Description": "Given an integer array nums of length n and an integer target, find three integers in nums such that the sum is closest to target.\n\nReturn the sum of the three integers.\n\nYou may assume that each input would have exactly one solution.\n",
        "Examples": [
            "Example 1:\n\nInput: nums = [-1,2,1,-4], target = 1\nOutput: 2\nExplanation: The sum that is closest to the target is 2. (-1 + 2 + 1 = 2).\n",
            "Example 2:\n\nInput: nums = [0,0,0], target = 1\nOutput: 0\nExplanation: The sum that is closest to the target is 0. (0 + 0 + 0 = 0).\n"
        ],
        "Constraints": [
            "3 <= nums.length <= 500",
            "-1000 <= nums[i] <= 1000",
            "-10^4 <= target <= 10^4"
        ]
    },
    {
        "Id": "17",
        "Problem_num": 17,
        "Title": "Letter Combinations of a Phone Number",
        "Status": "Medium",
        "Description": "Given a string containing digits from 2-9 inclusive, return all possible letter combinations that the number could represent. Return the answer in any order.\n\nA mapping of digit to letters (just like on the telephone buttons) is given below. Note that 1 does not map to any letters.\n\n2: 'abc'\n3: 'def'\n4: 'ghi'\n5: 'jkl'\n6: 'mno'\n7: 'pqrs'\n8: 'tuv'\n9: 'wxyz'\n\nExample:\n\nInput: digits = \"23\"\nOutput: [\"ad\",\"ae\",\"af\",\"bd\",\"be\",\"bf\",\"cd\",\"ce\",\"cf\"]\n",
        "Examples": [
            "Example 1:\n\nInput: digits = \"23\"\nOutput: [\"ad\",\"ae\",\"af\",\"bd\",\"be\",\"bf\",\"cd\",\"ce\",\"cf\"]\n",
            "Example 2:\n\nInput: digits = \"\"\nOutput: []\n",
            "Example 3:\n\nInput: digits = \"2\"\nOutput: [\"a\",\"b\",\"c\"]\n"
        ],
        "Constraints": [
            "0 <= digits.length <= 4",
            "digits[i] is a digit in the range ['2', '9']"
        ]
    },
    {
        "Id": "18",
        "Problem_num": 18,
        "Title": "4Sum",
        "Status": "Medium",
        "Description": "Given an array nums of n integers, return an array of all the unique quadruplets [nums[a], nums[b], nums[c], nums[d]] such that:\n\n0 <= a, b, c, d < n\n\na, b, c, and d are distinct.\n\nnums[a] + nums[b] + nums[c] + nums[d] == target\n\nYou may return the answer in any order.",
        "Examples": [
            "Example 1:\n\nInput: nums = [1,0,-1,0,-2,2], target = 0\nOutput: [[-2,-1,1,2],[-2,0,0,2],[-1,0,0,1]]\n\nExplanation: The sum that is closest to the target is 0. (1 + 0 + (-1) + 0 = 0).\n",
            "Example 2:\n\nInput: nums = [2,2,2,2,2], target = 8\nOutput: [[2,2,2,2]]\n\nExplanation: The sum that is closest to the target is 8. (2 + 2 + 2 + 2 = 8).\n"
        ],
        "Constraints": [
            "1 <= nums.length <= 200",
            "-10^9 <= nums[i] <= 10^9",
            "-10^9 <= target <= 10^9"
        ]
    },
    {
        "Id": "19",
        "Problem_num": 19,
        "Title": "Remove Nth Node From End of List",
        "Status": "Medium",
        "Description": "Given the head of a linked list, remove the nth node from the end of the list and return its head.\n\nExample:\n\nInput: head = [1,2,3,4,5], n = 2\nOutput: [1,2,3,5]\n\nExplanation: The linked list [1,2,3,4,5] should return [1,2,3,5] after removing the second node from the end.",
        "Examples": [
            "Example 1:\n\nInput: head = [1,2,3,4,5], n = 2\nOutput: [1,2,3,5]\n\nExplanation: The linked list [1,2,3,4,5] should return [1,2,3,5] after removing the second node from the end.",
            "Example 2:\n\nInput: head = [1], n = 1\nOutput: []\n\nExplanation: The linked list [1] should return [] after removing the first node from the end."
        ],
        "Constraints": [
            "The number of nodes in the list is sz.",
            "1 <= sz <= 30",
            "0 <= Node.val <= 100",
            "1 <= n <= sz"
        ]
    },
    {
        "Id": "20",
        "Problem_num": 20,
        "Title": "Valid Parentheses",
        "Status": "Easy",
        "Description": "Given a string s containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid.\n\nAn input string is valid if:\n\n1. Open brackets must be closed by the same type of brackets.\n2. Open brackets must be closed in the correct order.\n\nExample:\n\nInput: s = \"()\"\nOutput: true\n\nInput: s = \"()[]{}\"\nOutput: true\n\nInput: s = \"(]\"\nOutput: false\n",
        "Examples": [
            "Example 1:\n\nInput: s = \"()\"\nOutput: true\n\nExplanation: The string \"()\" is valid because each open bracket is closed by the same type of bracket in the correct order.",
            "Example 2:\n\nInput: s = \"()[]{}\"\nOutput: true\n\nExplanation: The string \"()[]{}\" is valid because each open bracket is closed by the same type of bracket in the correct order.",
            "Example 3:\n\nInput: s = \"(]\"\nOutput: false\n\nExplanation: The string \"(]\" is not valid because the open bracket '(' is not closed by a matching close bracket in the correct order."
        ],
        "Constraints": [
            "1 <= s.length <= 10^4",
            "s consists of parentheses only '()[]{}'."
        ]
    },
    {
        "Id": "21",
        "Problem_num": 21,
        "Title": "Merge Two Sorted Lists",
        "Status": "Easy",
        "Description": "You are given the heads of two sorted linked lists list1 and list2.\n\nMerge the two lists in a one sorted list. The list should be made by splicing together the nodes of the first two lists.\n\nReturn the head of the merged linked list.\n\nExample:\n\nInput: list1 = [1,2,4], list2 = [1,3,4]\nOutput: [1,1,2,3,4,4]\n\nExplanation: The lists [1,2,4] and [1,3,4] should be merged to become [1,1,2,3,4,4].",
        "Examples": [
            "Example 1:\n\nInput: list1 = [1,2,4], list2 = [1,3,4]\nOutput: [1,1,2,3,4,4]\n\nExplanation: The lists [1,2,4] and [1,3,4] should be merged to become [1,1,2,3,4,4].",
            "Example 2:\n\nInput: list1 = [], list2 = []\nOutput: []\n\nExplanation: The lists are empty, so the merged list is also empty.",
            "Example 3:\n\nInput: list1 = [], list2 = [0]\nOutput: [0]\n\nExplanation: The list list1 is empty, so the merged list is the same as list2."
        ],
        "Constraints": [
            "The number of nodes in both lists is in the range [0, 50].",
            "-100 <= Node.val <= 100",
            "Both list1 and list2 are sorted in non-decreasing order."
        ]
    },
    {
        "Id": "22",
        "Problem_num": 22,
        "Title": "Generate Parentheses",
        "Status": "Medium",
        "Description": "Given n pairs of parentheses, write a function to generate all combinations of well-formed parentheses.\n\nExample:\n\nInput: n = 3\nOutput: [\"((()))\",\"(()())\",\"(())()\",\"()(())\",\"()()()\"]\n\nExplanation: The answer contains all valid combinations of 3 pairs of parentheses.",
        "Examples": [
            "Example 1:\n\nInput: n = 3\nOutput: [\"((()))\",\"(()())\",\"(())()\",\"()(())\",\"()()()\"]\n\nExplanation: The answer contains all valid combinations of 3 pairs of parentheses."
        ],
        "Constraints": [
            "1 <= n <= 8"
        ]
    },
    {
        "Id": "23",
        "Problem_num": 23,
        "Title": "Merge k Sorted Lists",
        "Status": "Hard",
        "Description": "You are given an array of k linked-lists lists, each linked-list is sorted in ascending order.\n\nMerge all the linked-lists into one sorted linked-list and return it.",
        "Examples": [
            "Example 1:\n\nInput: lists = [[1,4,5],[1,3,4],[2,6]]\nOutput: [1,1,2,3,4,4,5,6]\n\nExplanation: The linked-lists are:\n  [\n    1->4->5,\n    1->3->4,\n    2->6\n  ]\nmerging them into one sorted list:\n1->1->2->3->4->4->5->6."
        ],
        "Constraints": [
            "0 <= k <= 10^4",
            "0 <= lists[i].length <= 500",
            "-10^4 <= lists[i][j] <= 10^4",
            "lists[i] is sorted in ascending order.",
            "The sum of lists[i].length won't exceed 10^4."
        ]
    },
    {
        "Id": "24",
        "Problem_num": 24,
        "Title": "Swap Nodes in Pairs",
        "Status": "Medium",
        "Description": "Given a linked list, swap every two adjacent nodes and return its head.\n\nExample:\n\nInput: head = [1,2,3,4]\nOutput: [2,1,4,3]\n\nExplanation: The linked list becomes 2->1->4->3 after swapping every two nodes.",
        "Examples": [
            "Example 1:\n\nInput: head = [1,2,3,4]\nOutput: [2,1,4,3]\n\nExplanation: The linked list becomes 2->1->4->3 after swapping every two nodes.",
            "Example 2:\n\nInput: head = []\nOutput: []\n\nExplanation: The list is empty, so no swapping is done."
        ],
        "Constraints": [
            "The number of nodes in the list is in the range [0, 100]."
        ]
    },
    {
        "Id": "25",
        "Problem_num": 25,
        "Title": "Reverse Nodes in k-Group",
        "Status": "Hard",
        "Description": "Given a linked list, reverse the nodes of a linked list k at a time and return its modified list.\n\nk is a positive integer and is less than or equal to the length of the linked list. If the number of nodes is not a multiple of k then left-out nodes, in the end, should remain as it is.\n\nYou may not alter the values in the list's nodes, only nodes themselves may be changed.",
        "Examples": [
            "Example 1:\n\nInput: head = [1,2,3,4,5], k = 2\nOutput: [2,1,4,3,5]\n\nExample 2:\n\nInput: head = [1,2,3,4,5], k = 3\nOutput: [3,2,1,4,5]\n\nExample 3:\n\nInput: head = [1,2,3,4,5], k = 1\nOutput: [1,2,3,4,5]\n\nExample 4:\n\nInput: head = [1], k = 1\nOutput: [1]"
        ],
        "Constraints": [
            "The number of nodes in the list is in the range sz.",
            "1 <= sz <= 5000",
            "0 <= Node.val <= 1000",
            "1 <= k <= sz"
        ]
    },
    {
        "Id": "26",
        "Problem_num": 26,
        "Title": "Remove Duplicates from Sorted Array",
        "Status": "Easy",
        "Description": "Given a sorted array nums, remove the duplicates in-place such that each element appears only once and returns the new length.\n\nDo not allocate extra space for another array, you must do this by modifying the input array in-place with O(1) extra memory.",
        "Examples": [
            "Example 1:\n\nInput: nums = [1,1,2]\nOutput: 2\n\nExplanation: Your function should return length = 2, with the first two elements of nums being 1 and 2 respectively.\nIt doesn't matter what you leave beyond the returned length."
        ],
        "Constraints": [
            "0 <= nums.length <= 3 * 10^4",
            "-10^4 <= nums[i] <= 10^4",
            "nums is sorted in ascending order."
        ]
    },
    {
        "Id": "27",
        "Problem_num": 27,
        "Title": "Remove Element",
        "Status": "Easy",
        "Description": "Given an integer array nums and an integer val, remove all occurrences of val in nums in-place. The relative order of the elements may be changed.\n\nSince it is impossible to change the length of the array in some languages, you must instead have the result be placed in the first part of the array nums. More formally, if there are k elements after removing the duplicates, then the first k elements of nums should hold the final result. It does not matter what you leave beyond the first k elements.\n\nReturn k after placing the final result in the first k slots of nums.\n\nDo not allocate extra space for another array. You must do this by modifying the input array in-place with O(1) extra memory.",
        "Examples": [
            "Example 1:\n\nInput: nums = [3,2,2,3], val = 3\nOutput: 2, nums = [2,2,_,_]\n\nExplanation: Your function should return k = 2, with the first two elements of nums being 2."
        ],
        "Constraints": [
            "0 <= nums.length <= 100",
            "0 <= nums[i] <= 50",
            "0 <= val <= 100"
        ]
    },
    {
        "Id": "28",
        "Problem_num": 28,
        "Title": "Implement strStr()",
        "Status": "Easy",
        "Description": "Implement strStr().\n\nReturn the index of the first occurrence of needle in haystack, or -1 if needle is not part of haystack.\n\nClarification:\n\nWhat should we return when needle is an empty string? This is a great question to ask during an interview.\n\nFor the purpose of this problem, we will return 0 when needle is an empty string. This is consistent to C's strstr() and Java's indexOf().",
        "Examples": [
            "Example 1:\n\nInput: haystack = \"hello\", needle = \"ll\"\nOutput: 2"
        ],
        "Constraints": [
            "0 <= haystack.length, needle.length <= 5 * 10^4",
            "haystack and needle consist of only lower-case English characters."
        ]
    },
    {
        "Id": "29",
        "Problem_num": 29,
        "Title": "Divide Two Integers",
        "Status": "Medium",
        "Description": "Given two integers dividend and divisor, divide two integers without using multiplication, division, and mod operator.\n\nReturn the quotient after dividing dividend by divisor.\n\nThe integer division should truncate toward zero, which means losing its fractional part. For example, truncate(8.345) = 8 and truncate(-2.7335) = -2.",
        "Examples": [
            "Example 1:\n\nInput: dividend = 10, divisor = 3\nOutput: 3\n\nExample 2:\n\nInput: dividend = 7, divisor = -3\nOutput: -2\n\nExplanation: Both dividend and divisor will fit in the 32-bit signed integer range. The divisor divisor = -3 will truncate toward zero, so the output is -2."
        ],
        "Constraints": [
            "-2^31 <= dividend, divisor <= 2^31 - 1",
            "divisor != 0"
        ]
    },
    {
        "Id": "30",
        "Problem_num": 30,
        "Title": "Substring with Concatenation of All Words",
        "Status": "Hard",
        "Description": "You are given a string s and an array of strings words of the same length. Return all starting indices of substring(s) in s that is a concatenation of each word in words exactly once, in any order, and without any intervening characters.\n\nYou can return the answer in any order.",
        "Examples": [
            "Example 1:\n\nInput: s = \"barfoothefoobarman\", words = [\"foo\",\"bar\"]\nOutput: [0,9]\n\nExplanation: Substrings starting at index 0 and 9 are \"barfoo\" and \"foobar\" respectively.\nThe output order does not matter, returning [9,0] is fine too."
        ],
        "Constraints": [
            "1 <= s.length <= 10^4",
            "s consists of lower-case English letters.",
            "1 <= words.length <= 5000",
            "1 <= words[i].length <= 30",
            "words[i] consists of lower-case English letters."
        ]
    },
    {
        "Id": "31",
        "Problem_num": 31,
        "Title": "Next Permutation",
        "Status": "Medium",
        "Description": "Implement next permutation, which rearranges numbers into the lexicographically next greater permutation of numbers.\n\nIf such an arrangement is not possible, it must rearrange it as the lowest possible order (i.e., sorted in ascending order).\n\nThe replacement must be in place and use only constant extra memory.",
        "Examples": [
            "Example 1:\n\nInput: nums = [1,2,3]\nOutput: [1,3,2]\n\nExample 2:\n\nInput: nums = [3,2,1]\nOutput: [1,2,3]\n\nExample 3:\n\nInput: nums = [1,1,5]\nOutput: [1,5,1]"
        ],
        "Constraints": [
            "1 <= nums.length <= 100",
            "0 <= nums[i] <= 100"
        ]
    },
    {
        "Id": "32",
        "Problem_num": 32,
        "Title": "Longest Valid Parentheses",
        "Status": "Hard",
        "Description": "Given a string containing just the characters '(' and ')', find the length of the longest valid (well-formed) parentheses substring.\n\nExample:\n\nInput: s = \"(()\"\nOutput: 2\n\nExplanation: The longest valid parentheses substring is \"()\".",
        "Examples": [
            "Example 1:\n\nInput: s = \"(()\"\nOutput: 2\n\nExample 2:\n\nInput: s = \")()())\"\nOutput: 4\n\nExample 3:\n\nInput: s = \"\"\nOutput: 0"
        ],
        "Constraints": [
            "0 <= s.length <= 3 * 10^4",
            "s[i] is '(', or ')'."
        ]
    },
    {
        "Id": "33",
        "Problem_num": 33,
        "Title": "Search in Rotated Sorted Array",
        "Status": "Medium",
        "Description": "You are given an integer array nums sorted in ascending order (with distinct values), and an integer target.\n\nSuppose that nums is rotated at some pivot unknown to you beforehand (i.e., [0,1,2,4,5,6,7] might become [4,5,6,7,0,1,2]).\n\nIf target is found in the array return its index, otherwise, return -1.",
        "Examples": [
            "Example 1:\n\nInput: nums = [4,5,6,7,0,1,2], target = 0\nOutput: 4",
            "Example 2:\n\nInput: nums = [4,5,6,7,0,1,2], target = 3\nOutput: -1",
            "Example 3:\n\nInput: nums = [1], target = 0\nOutput: -1"
        ],
        "Constraints": [
            "1 <= nums.length <= 5000",
            "-10^4 <= nums[i] <= 10^4",
            "All values of nums are unique.",
            "nums is guaranteed to be rotated at some pivot.",
            "-10^4 <= target <= 10^4"
        ]
    },    
    {
        "Id": "34",
        "Problem_num": 34,
        "Title": "Find First and Last Position of Element in Sorted Array",
        "Status": "Medium",
        "Description": "Given an array of integers nums sorted in ascending order, find the starting and ending position of a given target value.\n\nIf target is not found in the array, return [-1, -1].\n\nYou must write an algorithm with O(log n) runtime complexity.",
        "Examples": [
            "Example 1:\n\nInput: nums = [5,7,7,8,8,10], target = 8\nOutput: [3,4]",
            "Example 2:\n\nInput: nums = [5,7,7,8,8,10], target = 6\nOutput: [-1,-1]",
            "Example 3:\n\nInput: nums = [], target = 0\nOutput: [-1,-1]"
        ],
        "Constraints": [
            "0 <= nums.length <= 10^5",
            "-10^9 <= nums[i] <= 10^9",
            "nums is a non-decreasing array.",
            "-10^9 <= target <= 10^9"
        ]
    },
    {
        "Id": "35",
        "Problem_num": 35,
        "Title": "Search Insert Position",
        "Status": "Easy",
        "Description": "Given a sorted array of distinct integers and a target value, return the index if the target is found. If not, return the index where it would be if it were inserted in order.\n\nYou must write an algorithm with O(log n) runtime complexity.",
        "Examples": [
            "Example 1:\n\nInput: nums = [1,3,5,6], target = 5\nOutput: 2",
            "Example 2:\n\nInput: nums = [1,3,5,6], target = 2\nOutput: 1",
            "Example 3:\n\nInput: nums = [1,3,5,6], target = 7\nOutput: 4"
        ],
        "Constraints": [
            "1 <= nums.length <= 10^4",
            "-10^4 <= nums[i] <= 10^4",
            "nums contains distinct values sorted in ascending order.",
            "-10^4 <= target <= 10^4"
        ]
    },
    {
        "Id": "36",
        "Problem_num": 36,
        "Title": "Valid Sudoku",
        "Status": "Medium",
        "Description": "Determine if a 9 x 9 Sudoku board is valid. Only the filled cells need to be validated according to the following rules:\n\n1. Each row must contain the digits 1-9 without repetition.\n2. Each column must contain the digits 1-9 without repetition.\n3. Each of the nine 3 x 3 sub-boxes of the grid must contain the digits 1-9 without repetition.",
        "Examples": [
            "Example 1:\n\nInput: board = [\n  [\"5\",\"3\",\".\",\".\",\"7\",\".\",\".\",\".\",\".\"],\n  [\"6\",\".\",\".\",\"1\",\"9\",\"5\",\".\",\".\",\".\"],\n  [\".\",\"9\",\"8\",\".\",\".\",\".\",\".\",\"6\",\".\"],\n  [\"8\",\".\",\".\",\".\",\"6\",\".\",\".\",\".\",\"3\"],\n  [\"4\",\".\",\".\",\"8\",\".\",\"3\",\".\",\".\",\"1\"],\n  [\"7\",\".\",\".\",\".\",\"2\",\".\",\".\",\".\",\".\"],\n  [\".\",\"6\",\".\",\".\",\".\",\".\",\"2\",\"8\",\".\"],\n  [\".\",\".\",\".\",\"4\",\"1\",\"9\",\".\",\".\",\"5\"],\n  [\".\",\".\",\".\",\".\",\"8\",\".\",\".\",\"7\",\"9\"]\n]\nOutput: true"
        ],
        "Constraints": [
            "board.length == 9",
            "board[i].length == 9",
            "board[i][j] is a digit or '.'."
        ]
    },
    {
        "Id": "37",
        "Problem_num": 37,
        "Title": "Sudoku Solver",
        "Status": "Hard",
        "Description": "Write a program to solve a Sudoku puzzle by filling the empty cells.\n\nA sudoku solution must satisfy all of the following rules:\n\n1. Each of the digits 1-9 must occur exactly once in each row.\n2. Each of the digits 1-9 must occur exactly once in each column.\n3. Each of the digits 1-9 must occur exactly once in each of the 9 3x3 sub-boxes of the grid.",
        "Examples": [
            "Example 1:\n\nInput: board = [\n  [\"5\",\"3\",\".\",\".\",\"7\",\".\",\".\",\".\",\".\"],\n  [\"6\",\".\",\".\",\"1\",\"9\",\"5\",\".\",\".\",\".\"],\n  [\".\",\"9\",\"8\",\".\",\".\",\".\",\".\",\"6\",\".\"],\n  [\"8\",\".\",\".\",\".\",\"6\",\".\",\".\",\".\",\"3\"],\n  [\"4\",\".\",\".\",\"8\",\".\",\"3\",\".\",\".\",\"1\"],\n  [\"7\",\".\",\".\",\".\",\"2\",\".\",\".\",\".\",\".\"],\n  [\".\",\"6\",\".\",\".\",\".\",\".\",\"2\",\"8\",\".\"],\n  [\".\",\".\",\".\",\"4\",\"1\",\"9\",\".\",\".\",\"5\"],\n  [\".\",\".\",\".\",\".\",\"8\",\".\",\".\",\"7\",\"9\"]\n]\nOutput: [\n  [\"5\",\"3\",\"4\",\"6\",\"7\",\"8\",\"9\",\"1\",\"2\"],\n  [\"6\",\"7\",\"2\",\"1\",\"9\",\"5\",\"3\",\"4\",\"8\"],\n  [\"1\",\"9\",\"8\",\"3\",\"4\",\"2\",\"5\",\"6\",\"7\"],\n  [\"8\",\"5\",\"9\",\"7\",\"6\",\"1\",\"4\",\"2\",\"3\"],\n  [\"4\",\"2\",\"6\",\"8\",\"5\",\"3\",\"7\",\"9\",\"1\"],\n  [\"7\",\"1\",\"3\",\"9\",\"2\",\"4\",\"8\",\"5\",\"6\"],\n  [\"9\",\"6\",\"1\",\"5\",\"3\",\"7\",\"2\",\"8\",\"4\"],\n  [\"2\",\"8\",\"7\",\"4\",\"1\",\"9\",\"6\",\"3\",\"5\"],\n  [\"3\",\"4\",\"5\",\"2\",\"8\",\"6\",\"1\",\"7\",\"9\"]\n]"
        ],
        "Constraints": [
            "board.length == 9",
            "board[i].length == 9",
            "board[i][j] is a digit or '.'.",
            "It is guaranteed that the input board has only one solution."
        ]
    },
    {
        "Id": "39",
        "Problem_num": 39,
        "Title": "Combination Sum",
        "Status": "Medium",
        "Description": "Given an array of distinct integers candidates and a target integer target, return a list of all unique combinations of candidates where the chosen numbers sum to target. You may return the combinations in any order.\n\nThe same number may be chosen from candidates an unlimited number of times. Two combinations are unique if the frequency of at least one of the chosen numbers is different.\n\nIt is guaranteed that the number of unique combinations that sum up to target is less than 150 combinations for the given input.",
        "Examples": [
            "Example 1:\n\nInput: candidates = [2,3,6,7], target = 7\nOutput: [[2,2,3],[7]]\nExplanation: 2 and 3 are candidates, and 2 + 2 + 3 = 7. Note that 2 can be used multiple times. 7 is a candidate, and 7 = 7. These are the only two combinations."
        ],
        "Constraints": [
            "1 <= candidates.length <= 30",
            "1 <= candidates[i] <= 200",
            "All elements of candidates are distinct.",
            "1 <= target <= 500"
        ]
    },
    {
        "Id": "40",
        "Problem_num": 40,
        "Title": "Combination Sum II",
        "Status": "Medium",
        "Description": "Given a collection of candidate numbers (candidates) and a target number (target), find all unique combinations in candidates where the candidate numbers sum to target.\n\nEach number in candidates may only be used once in the combination.\n\nNote: The solution set must not contain duplicate combinations.",
        "Examples": [
            "Example 1:\n\nInput: candidates = [10,1,2,7,6,1,5], target = 8\nOutput: [[1,1,6],[1,2,5],[1,7],[2,6]]\nExplanation: The solution set must not contain duplicate combinations."
        ],
        "Constraints": [
            "1 <= candidates.length <= 100",
            "1 <= candidates[i] <= 50",
            "1 <= target <= 30"
        ]
    },
    {
        "Id": "41",
        "Problem_num": 41,
        "Title": "First Missing Positive",
        "Status": "Hard",
        "Description": "Given an unsorted integer array nums, find the smallest missing positive integer.\n\nYou must implement an algorithm that runs in O(n) time and uses constant extra space.",
        "Examples": [
            "Example 1:\n\nInput: nums = [1,2,0]\nOutput: 3",
            "Example 2:\n\nInput: nums = [3,4,-1,1]\nOutput: 2",
            "Example 3:\n\nInput: nums = [7,8,9,11,12]\nOutput: 1"
        ],
        "Constraints": [
            "1 <= nums.length <= 5 * 10^5",
            "-2^31 <= nums[i] <= 2^31 - 1"
        ]
    },
    {
        "Id": "42",
        "Problem_num": 42,
        "Title": "Trapping Rain Water",
        "Status": "Hard",
        "Description": "Given n non-negative integers representing an elevation map where the width of each bar is 1, compute how much water it can trap after raining.",
        "Examples": [
            "Example 1:\n\nInput: height = [0,1,0,2,1,0,1,3,2,1,2,1]\nOutput: 6\nExplanation: The above elevation map (black section) is represented by array [0,1,0,2,1,0,1,3,2,1,2,1]. In this case, 6 units of rain water (blue section) are being trapped."
        ],
        "Constraints": [
            "n == height.length",
            "0 <= n <= 3 * 10^4",
            "0 <= height[i] <= 10^5"
        ]
    },
    {
        "Id": "43",
        "Problem_num": 43,
        "Title": "Multiply Strings",
        "Status": "Medium",
        "Description": "Given two non-negative integers num1 and num2 represented as strings, return the product of num1 and num2, also represented as a string.\n\nNote: You must not use any built-in BigInteger library or convert the inputs to integer directly.",
        "Examples": [
            "Example 1:\n\nInput: num1 = \"2\", num2 = \"3\"\nOutput: \"6\"",
            "Example 2:\n\nInput: num1 = \"123\", num2 = \"456\"\nOutput: \"56088\""
        ],
        "Constraints": [
            "1 <= num1.length, num2.length <= 200",
            "num1 and num2 consist of digits only.",
            "Both num1 and num2 do not contain any leading zero, except the number 0 itself."
        ]
    },
    {
        "Id": "44",
        "Problem_num": 44,
        "Title": "Wildcard Matching",
        "Status": "Hard",
        "Description": "Given an input string (s) and a pattern (p), implement wildcard pattern matching with support for '?' and '*'.\n\n'?' Matches any single character.\n'*' Matches any sequence of characters (including the empty sequence).\n\nThe matching should cover the entire input string (not partial).\n\nNote:\n\n- s could be empty and contains only lowercase letters a-z.\n- p could be empty and contains only lowercase letters a-z, and characters like ? or *.",
        "Examples": [
            "Example 1:\n\nInput: s = \"aa\", p = \"*\"\nOutput: true\nExplanation: '*' matches any sequence.",
            "Example 2:\n\nInput: s = \"cb\", p = \"?a\"\nOutput: false\nExplanation: '?' matches 'c', but the second letter is 'a', which does not match 'b'.",
            "Example 3:\n\nInput: s = \"adceb\", p = \"*a*b\"\nOutput: true\nExplanation: The first '*' matches the empty sequence, while the second '*' matches the substring \"dce\"."
        ],
        "Constraints": [
            "0 <= s.length, p.length <= 2000",
            "s contains only lowercase English letters.",
            "p contains only lowercase English letters, '?' or '*'."
        ]
    },
    {
        "Id": "45",
        "Problem_num": 45,
        "Title": "Jump Game II",
        "Status": "Hard",
        "Description": "Given an array of non-negative integers nums, you are initially positioned at the first index of the array.\n\nEach element in the array represents your maximum jump length at that position.\n\nYour goal is to reach the last index in the minimum number of jumps.\n\nYou can assume that you can always reach the last index.",
        "Examples": [
            "Example 1:\n\nInput: nums = [2,3,1,1,4]\nOutput: 2\nExplanation: The minimum number of jumps to reach the last index is 2. Jump 1 step from index 0 to 1, then 3 steps to the last index.",
            "Example 2:\n\nInput: nums = [2,3,0,1,4]\nOutput: 2\nExplanation: The minimum number of jumps to reach the last index is 2. Jump 1 step from index 0 to 1, then 3 steps to the last index."
        ],
        "Constraints": [
            "1 <= nums.length <= 1000",
            "0 <= nums[i] <= 10^5"
        ]
    },
    {
        "Id": "46",
        "Problem_num": 46,
        "Title": "Permutations",
        "Status": "Medium",
        "Description": "Given an array nums of distinct integers, return all the possible permutations. You can return the answer in any order.",
        "Examples": [
            "Example 1:\n\nInput: nums = [1,2,3]\nOutput: [\n  [1,2,3],\n  [1,3,2],\n  [2,1,3],\n  [2,3,1],\n  [3,1,2],\n  [3,2,1]\n]"
        ],
        "Constraints": [
            "1 <= nums.length <= 6",
            "-10 <= nums[i] <= 10",
            "All the integers of nums are unique."
        ]
    },
    {
        "Id": "47",
        "Problem_num": 47,
        "Title": "Permutations II",
        "Status": "Medium",
        "Description": "Given a collection of numbers, nums, that might contain duplicates, return all possible unique permutations in any order.",
        "Examples": [
            "Example 1:\n\nInput: nums = [1,1,2]\nOutput: [\n  [1,1,2],\n  [1,2,1],\n  [2,1,1]\n]"
        ],
        "Constraints": [
            "1 <= nums.length <= 8",
            "-10 <= nums[i] <= 10"
        ]
    },
    {
        "Id": "48",
        "Problem_num": 48,
        "Title": "Rotate Image",
        "Status": "Medium",
        "Description": "You are given an n x n 2D matrix representing an image, rotate the image by 90 degrees (clockwise).\n\nYou have to rotate the image in-place, which means you have to modify the input 2D matrix directly. DO NOT allocate another 2D matrix and do the rotation.",
        "Examples": [
            "Example 1:\n\nInput: matrix = [[1,2,3],[4,5,6],[7,8,9]]\nOutput: [[7,4,1],[8,5,2],[9,6,3]]",
            "Example 2:\n\nInput: matrix = [[5,1,9,11],[2,4,8,10],[13,3,6,7],[15,14,12,16]]\nOutput: [[15,13,2,5],[14,3,4,1],[12,6,8,9],[16,7,10,11]]"
        ],
        "Constraints": [
            "matrix.length == n",
            "matrix[i].length == n",
            "1 <= n <= 20",
            "-1000 <= matrix[i][j] <= 1000"
        ]
    },
    {
        "Id": "49",
        "Problem_num": 49,
        "Title": "Group Anagrams",
        "Status": "Medium",
        "Description": "Given an array of strings strs, group the anagrams together. You can return the answer in any order.\n\nAn Anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once.",
        "Examples": [
            "Example 1:\n\nInput: strs = [\"eat\",\"tea\",\"tan\",\"ate\",\"nat\",\"bat\"]\nOutput: [\n  [\"bat\"],[\"nat\",\"tan\"],[\"ate\",\"eat\",\"tea\"]\n]",
            "Example 2:\n\nInput: strs = [\"\"]\nOutput: [[\"\"]]"
        ],
        "Constraints": [
            "1 <= strs.length <= 10^4",
            "0 <= strs[i].length <= 100",
            "strs[i] consists of lowercase English letters."
        ]
    },
    {
        "Id": "50",
        "Problem_num": 50,
        "Title": "Pow(x, n)",
        "Status": "Medium",
        "Description": "Implement pow(x, n), which calculates x raised to the power n (i.e., x^n).",
        "Examples": [
            "Example 1:\n\nInput: x = 2.00000, n = 10\nOutput: 1024.00000",
            "Example 2:\n\nInput: x = 2.10000, n = 3\nOutput: 9.26100",
            "Example 3:\n\nInput: x = 2.00000, n = -2\nOutput: 0.25000\nExplanation: 2^-2 = 1/2^2 = 1/4 = 0.25"
        ],
        "Constraints": [
            "-100.0 < x < 100.0",
            "-2^31 <= n <= 2^31 - 1",
            "-10^4 <= x^n <= 10^4"
        ]
    },
    {
        "Id": "51",
        "Problem_num": 51,
        "Title": "N-Queens",
        "Status": "Hard",
        "Description": "The n-queens puzzle is the problem of placing n queens on an n x n chessboard such that no two queens attack each other.\n\nGiven an integer n, return all distinct solutions to the n-queens puzzle. You may return the answer in any order.",
        "Examples": [
            "Example 1:\n\nInput: n = 4\nOutput: [\n [\".Q..\",  // Solution 1\n  \"...Q\",\n  \"Q...\",\n  \"..Q.\"],\n [\"..Q.\",  // Solution 2\n  \"Q...\",\n  \"...Q\",\n  \".Q..\"]\n]\nExplanation: There exist two distinct solutions to the 4-queens puzzle as shown above."
        ],
        "Constraints": [
            "1 <= n <= 9"
        ]
    },
    {
        "Id": "52",
        "Problem_num": 52,
        "Title": "N-Queens II",
        "Status": "Hard",
        "Description": "The n-queens puzzle is the problem of placing n queens on an n x n chessboard such that no two queens attack each other.\n\nGiven an integer n, return the number of distinct solutions to the n-queens puzzle.",
        "Examples": [
            "Example 1:\n\nInput: n = 4\nOutput: 2\nExplanation: There are two distinct solutions to the 4-queens puzzle as shown."
        ],
        "Constraints": [
            "1 <= n <= 9"
        ]
    },
    {
        "Id": "53",
        "Problem_num": 53,
        "Title": "Maximum Subarray",
        "Status": "Easy",
        "Description": "Given an integer array nums, find the contiguous subarray (containing at least one number) which has the largest sum and return its sum.",
        "Examples": [
            "Example 1:\n\nInput: nums = [-2,1,-3,4,-1,2,1,-5,4]\nOutput: 6\nExplanation: [4,-1,2,1] has the largest sum = 6."
        ],
        "Constraints": [
            "1 <= nums.length <= 3 * 10^4",
            "-10^5 <= nums[i] <= 10^5"
        ]
    },
    {
        "Id": "54",
        "Problem_num": 54,
        "Title": "Spiral Matrix",
        "Status": "Medium",
        "Description": "Given an m x n matrix, return all elements of the matrix in spiral order.",
        "Examples": [
            "Example 1:\n\nInput: matrix = [[1,2,3],[4,5,6],[7,8,9]]\nOutput: [1,2,3,6,9,8,7,4,5]",
            "Example 2:\n\nInput: matrix = [[1,2,3,4],[5,6,7,8],[9,10,11,12]]\nOutput: [1,2,3,4,8,12,11,10,9,5,6,7]"
        ],
        "Constraints": [
            "m == matrix.length",
            "n == matrix[i].length",
            "1 <= m, n <= 10",
            "-100 <= matrix[i][j] <= 100"
        ]
    },
    {
        "Id": "55",
        "Problem_num": 55,
        "Title": "Jump Game",
        "Status": "Medium",
        "Description": "Given an array of non-negative integers nums, you are initially positioned at the first index of the array.\n\nEach element in the array represents your maximum jump length at that position.\n\nDetermine if you can reach the last index.",
        "Examples": [
            "Example 1:\n\nInput: nums = [2,3,1,1,4]\nOutput: true\nExplanation: Jump 1 step from index 0 to 1, then 3 steps to the last index.",
            "Example 2:\n\nInput: nums = [3,2,1,0,4]\nOutput: false\nExplanation: You will always arrive at index 3 no matter what. Its maximum jump length is 0, which means you can't reach the last index."
        ],
        "Constraints": [
            "1 <= nums.length <= 10^4",
            "0 <= nums[i] <= 10^5"
        ]
    },
    {
        "Id": "56",
        "Problem_num": 56,
        "Title": "Merge Intervals",
        "Status": "Medium",
        "Description": "Given an array of intervals where intervals[i] = [start_i, end_i], merge all overlapping intervals, and return an array of the non-overlapping intervals that cover all the intervals in the input.",
        "Examples": [
            "Example 1:\n\nInput: intervals = [[1,3],[2,6],[8,10],[15,18]]\nOutput: [[1,6],[8,10],[15,18]]\nExplanation: Since intervals [1,3] and [2,6] overlaps, merge them into [1,6]."
        ],
        "Constraints": [
            "1 <= intervals.length <= 10^4",
            "intervals[i].length == 2",
            "0 <= start_i <= end_i <= 10^4"
        ]
    },
    {
        "Id": "57",
        "Problem_num": 57,
        "Title": "Insert Interval",
        "Status": "Hard",
        "Description": "Given a set of non-overlapping intervals, insert a new interval into the intervals (merge if necessary).\n\nYou may assume that the intervals were initially sorted according to their start times.",
        "Examples": [
            "Example 1:\n\nInput: intervals = [[1,3],[6,9]], newInterval = [2,5]\nOutput: [[1,5],[6,9]]\nExplanation: Intervals [1,3] and [2,5] overlap, so they are merged into [1,5]."
        ],
        "Constraints": [
            "0 <= intervals.length <= 10^4",
            "intervals[i].length == 2",
            "0 <= intervals[i][0] <= intervals[i][1] <= 10^5",
            "intervals is sorted by intervals[i][0] in ascending order."
        ]
    },
    {
        "Id": "58",
        "Problem_num": 58,
        "Title": "Length of Last Word",
        "Status": "Easy",
        "Description": "Given a string s consisting of some words separated by some number of spaces, return the length of the last word in the string.\n\nA word is a maximal substring consisting of non-space characters only.",
        "Examples": [
            "Example 1:\n\nInput: s = \"Hello World\"\nOutput: 5\nExplanation: The last word is \"World\" with length 5.",
            "Example 2:\n\nInput: s = \"   fly me   to   the moon  \"\nOutput: 4\nExplanation: The last word is \"moon\" with length 4."
        ],
        "Constraints": [
            "1 <= s.length <= 10^4",
            "s consists of upper-case and lower-case English letters and spaces ' '.",
            "There is at least one word in s."
        ]
    },
    {
        "Id": "59",
        "Problem_num": 59,
        "Title": "Spiral Matrix II",
        "Status": "Medium",
        "Description": "Given a positive integer n, generate an n x n matrix filled with elements from 1 to n^2 in spiral order.",
        "Examples": [
            "Example 1:\n\nInput: n = 3\nOutput: [[1,2,3],[8,9,4],[7,6,5]]"
        ],
        "Constraints": [
            "1 <= n <= 20"
        ]
    },
    {
        "Id": "60",
        "Problem_num": 60,
        "Title": "Permutation Sequence",
        "Status": "Medium",
        "Description": "The set [1, 2, 3, ..., n] contains a total of n! unique permutations.\n\nBy listing and labeling all of the permutations in order, we get the following sequence for n = 3:\n\n\"123\"\n\"132\"\n\"213\"\n\"231\"\n\"312\"\n\"321\"\n\nGiven n and k, return the kth permutation sequence.",
        "Examples": [
            "Example 1:\n\nInput: n = 3, k = 3\nOutput: \"213\"",
            "Example 2:\n\nInput: n = 4, k = 9\nOutput: \"2314\"",
            "Example 3:\n\nInput: n = 3, k = 1\nOutput: \"123\""
        ],
        "Constraints": [
            "1 <= n <= 9",
            "1 <= k <= n!"
        ]
    },
    {
        "Id": "61",
        "Problem_num": 61,
        "Title": "Rotate List",
        "Status": "Medium",
        "Description": "Given the head of a linked list, rotate the list to the right by k places.",
        "Examples": [
            "Example 1:\n\nInput: head = [1,2,3,4,5], k = 2\nOutput: [4,5,1,2,3]",
            "Example 2:\n\nInput: head = [0,1,2], k = 4\nOutput: [2,0,1]"
        ],
        "Constraints": [
            "The number of nodes in the list is in the range [0, 500].",
            "-100 <= Node.val <= 100",
            "0 <= k <= 2 * 10^9"
        ]
    },
    {
        "Id": "62",
        "Problem_num": 62,
        "Title": "Unique Paths",
        "Status": "Medium",
        "Description": "A robot is located at the top-left corner of a m x n grid (marked 'Start' in the diagram below).\n\nThe robot can only move either down or right at any point in time. The robot is trying to reach the bottom-right corner of the grid (marked 'Finish' in the diagram below).\n\nHow many possible unique paths are there?",
        "Examples": [
            "Example 1:\n\nInput: m = 3, n = 7\nOutput: 28",
            "Example 2:\n\nInput: m = 3, n = 2\nOutput: 3\nExplanation: From the top-left corner, there are a total of 3 ways to reach the bottom-right corner:\n1. Right -> Down -> Down\n2. Down -> Down -> Right\n3. Down -> Right -> Down"
        ],
        "Constraints": [
            "1 <= m, n <= 100",
            "It's guaranteed that the answer will be less than or equal to 2 * 10^9."
        ]
    },
    {
        "Id": "63",
        "Problem_num": 63,
        "Title": "Unique Paths II",
        "Status": "Medium",
        "Description": "A robot is located at the top-left corner of a m x n grid (marked 'Start' in the diagram below).\n\nThe robot can only move either down or right at any point in time. The robot is trying to reach the bottom-right corner of the grid (marked 'Finish' in the diagram below).\n\nNow consider if some obstacles are added to the grids. How many unique paths would there be?\n\nAn obstacle and space is marked as 1 and 0 respectively in the grid.",
        "Examples": [
            "Example 1:\n\nInput: obstacleGrid = [[0,0,0],[0,1,0],[0,0,0]]\nOutput: 2\nExplanation: There is one obstacle in the middle of the 3x3 grid above. There are two ways to reach the bottom-right corner:\n1. Right -> Right -> Down -> Down\n2. Down -> Down -> Right -> Right",
            "Example 2:\n\nInput: obstacleGrid = [[0,1],[0,0]]\nOutput: 1"
        ],
        "Constraints": [
            "m == obstacleGrid.length",
            "n == obstacleGrid[i].length",
            "1 <= m, n <= 100",
            "obstacleGrid[i][j] is 0 or 1."
        ]
    },
    {
        "Id": "64",
        "Problem_num": 64,
        "Title": "Minimum Path Sum",
        "Status": "Medium",
        "Description": "Given a m x n grid filled with non-negative numbers, find a path from top left to bottom right, which minimizes the sum of all numbers along its path.\n\nNote: You can only move either down or right at any point in time.",
        "Examples": [
            "Example 1:\n\nInput: grid = [[1,3,1],[1,5,1],[4,2,1]]\nOutput: 7\nExplanation: Because the path 1 → 3 → 1 → 1 → 1 minimizes the sum."
        ],
        "Constraints": [
            "m == grid.length",
            "n == grid[i].length",
            "1 <= m, n <= 200",
            "0 <= grid[i][j] <= 100"
        ]
    },
    {
        "Id": "65",
        "Problem_num": 65,
        "Title": "Valid Number",
        "Status": "Hard",
        "Description": "A valid number can be split up into these components (in order):\n\n- A decimal number or an integer.\n- (Optional) An 'e' or 'E', followed by an integer.\n\nA decimal number can be split up into these components (in order):\n\n- (Optional) A sign character (either '+' or '-').\n- One of the following formats:\n  - At least one digit, followed by a dot '.'.\n  - At least one digit, followed by a dot '.', followed by at least one digit.\n  - A dot '.', followed by at least one digit.\n\nAn integer can be split up into these components (in order):\n\n- (Optional) A sign character (either '+' or '-').\n- At least one digit.\n\nFor example, all the following are valid numbers: ['2', '0089', '-0.1', '+3.14', '4.', '-.9', '2e10', '-90E3', '3e+7', '+6e-1', '53.5e93', '-123.456e789']\n\nGiven a string s, return true if s is a valid number.",
        "Examples": [
            "Example 1:\n\nInput: s = \"0\"\nOutput: true",
            "Example 2:\n\nInput: s = \"e\"\nOutput: false",
            "Example 3:\n\nInput: s = \".\"\nOutput: false",
            "Example 4:\n\nInput: s = \".1\"\nOutput: true"
        ],
        "Constraints": [
            "1 <= s.length <= 20",
            "s consists of only English letters (both uppercase and lowercase), digits (0-9), plus '+', minus '-', or dot '.'."
        ]
    },
    {
        "Id": "66",
        "Problem_num": 66,
        "Title": "Plus One",
        "Status": "Easy",
        "Description": "Given a non-empty array of decimal digits representing a non-negative integer, increment one to the integer.\n\nThe digits are stored such that the most significant digit is at the head of the list, and each element in the array contains a single digit.\n\nYou may assume the integer does not contain any leading zero, except the number 0 itself.",
        "Examples": [
            "Example 1:\n\nInput: digits = [1,2,3]\nOutput: [1,2,4]\nExplanation: The array represents the integer 123, so the output is 124.",
            "Example 2:\n\nInput: digits = [4,3,2,1]\nOutput: [4,3,2,2]\nExplanation: The array represents the integer 4321, so the output is 4322."
        ],
        "Constraints": [
            "1 <= digits.length <= 100",
            "0 <= digits[i] <= 9"
        ]
    },
    {
        "Id": "67",
        "Problem_num": 67,
        "Title": "Add Binary",
        "Status": "Easy",
        "Description": "Given two binary strings a and b, return their sum as a binary string.",
        "Examples": [
            "Example 1:\n\nInput: a = \"11\", b = \"1\"\nOutput: \"100\"",
            "Example 2:\n\nInput: a = \"1010\", b = \"1011\"\nOutput: \"10101\""
        ],
        "Constraints": [
            "1 <= a.length, b.length <= 10^4",
            "a and b consist only of '0' or '1' characters.",
            "Each string does not contain leading zeros except for the zero itself."
        ]
    },
    {
        "Id": "68",
        "Problem_num": 68,
        "Title": "Text Justification",
        "Status": "Hard",
        "Description": "Given an array of strings words and a width maxWidth, format the text such that each line has exactly maxWidth characters and is fully (left and right) justified.\n\nYou should pack your words in a greedy approach; that is, pack as many words as you can in each line. Pad extra spaces ' ' when necessary so that each line has exactly maxWidth characters.\n\nExtra spaces between words should be distributed as evenly as possible. If the number of spaces on a line does not divide evenly between words, the empty slots on the left will be assigned more spaces than the slots on the right.\n\nFor the last line of text, it should be left-justified and no extra space is inserted between words.",
        "Examples": [
            "Example 1:\n\nInput: words = [\"This\", \"is\", \"an\", \"example\", \"of\", \"text\", \"justification.\"], maxWidth = 16\nOutput: [\n \"This    is    an\",\n \"example  of text\",\n \"justification.  \"\n]\n",
            "Example 2:\n\nInput: words = [\"What\",\"must\",\"be\",\"acknowledgment\",\"shall\",\"be\"], maxWidth = 16\nOutput: [\n \"What   must   be\",\n \"acknowledgment  \",\n \"shall be        \"\n]\nExplanation: Note that the last line is \"shall be    \" instead of \"shall     be\", because the last line must be left-justified instead of fully-justified.\n      Note that the second line is also left-justified becase it contains only one word."
        ],
        "Constraints": [
            "1 <= words.length <= 300",
            "1 <= words[i].length <= 20",
            "words[i] consists of only English letters and symbols.",
            "1 <= maxWidth <= 100"
        ]
    },
    {
        "Id": "69",
        "Problem_num": 69,
        "Title": "Sqrt(x)",
        "Status": "Easy",
        "Description": "Given a non-negative integer x, compute and return the square root of x.\n\nSince the return type is an integer, the decimal digits are truncated, and only the integer part of the result is returned.",
        "Examples": [
            "Example 1:\n\nInput: x = 4\nOutput: 2",
            "Example 2:\n\nInput: x = 8\nOutput: 2\nExplanation: The square root of 8 is 2.82842..., and since the decimal part is truncated, 2 is returned."
        ],
        "Constraints": [
            "0 <= x <= 2^31 - 1"
        ]
    },
    {
        "Id": "70",
        "Problem_num": 70,
        "Title": "Climbing Stairs",
        "Status": "Easy",
        "Description": "You are climbing a staircase. It takes n steps to reach the top.\n\nEach time you can either climb 1 or 2 steps. In how many distinct ways can you climb to the top?",
        "Examples": [
            "Example 1:\n\nInput: n = 2\nOutput: 2\nExplanation: There are two ways to climb to the top:\n1. 1 step + 1 step\n2. 2 steps",
            "Example 2:\n\nInput: n = 3\nOutput: 3\nExplanation: There are three ways to climb to the top:\n1. 1 step + 1 step + 1 step\n2. 1 step + 2 steps\n3. 2 steps + 1 step"
        ],
        "Constraints": [
            "1 <= n <= 45"
        ]
    }
]