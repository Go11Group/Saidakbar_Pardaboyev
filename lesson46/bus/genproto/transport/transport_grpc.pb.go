// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: transport.proto

package transport

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TransportServerClient is the client API for TransportServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TransportServerClient interface {
	GetBusSchedule(ctx context.Context, in *RequestBusSchedule, opts ...grpc.CallOption) (*ResponceBusSchedule, error)
	TrackBusLocation(ctx context.Context, in *RequestBusLocation, opts ...grpc.CallOption) (*ResponceBusLocation, error)
	ReportTrafficJam(ctx context.Context, in *RequestTrafficJam, opts ...grpc.CallOption) (*ResponceTrafficJam, error)
}

type transportServerClient struct {
	cc grpc.ClientConnInterface
}

func NewTransportServerClient(cc grpc.ClientConnInterface) TransportServerClient {
	return &transportServerClient{cc}
}

func (c *transportServerClient) GetBusSchedule(ctx context.Context, in *RequestBusSchedule, opts ...grpc.CallOption) (*ResponceBusSchedule, error) {
	out := new(ResponceBusSchedule)
	err := c.cc.Invoke(ctx, "/TransportServer/GetBusSchedule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transportServerClient) TrackBusLocation(ctx context.Context, in *RequestBusLocation, opts ...grpc.CallOption) (*ResponceBusLocation, error) {
	out := new(ResponceBusLocation)
	err := c.cc.Invoke(ctx, "/TransportServer/TrackBusLocation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transportServerClient) ReportTrafficJam(ctx context.Context, in *RequestTrafficJam, opts ...grpc.CallOption) (*ResponceTrafficJam, error) {
	out := new(ResponceTrafficJam)
	err := c.cc.Invoke(ctx, "/TransportServer/ReportTrafficJam", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TransportServerServer is the server API for TransportServer service.
// All implementations must embed UnimplementedTransportServerServer
// for forward compatibility
type TransportServerServer interface {
	GetBusSchedule(context.Context, *RequestBusSchedule) (*ResponceBusSchedule, error)
	TrackBusLocation(context.Context, *RequestBusLocation) (*ResponceBusLocation, error)
	ReportTrafficJam(context.Context, *RequestTrafficJam) (*ResponceTrafficJam, error)
	mustEmbedUnimplementedTransportServerServer()
}

// UnimplementedTransportServerServer must be embedded to have forward compatible implementations.
type UnimplementedTransportServerServer struct {
}

func (UnimplementedTransportServerServer) GetBusSchedule(context.Context, *RequestBusSchedule) (*ResponceBusSchedule, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBusSchedule not implemented")
}
func (UnimplementedTransportServerServer) TrackBusLocation(context.Context, *RequestBusLocation) (*ResponceBusLocation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TrackBusLocation not implemented")
}
func (UnimplementedTransportServerServer) ReportTrafficJam(context.Context, *RequestTrafficJam) (*ResponceTrafficJam, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReportTrafficJam not implemented")
}
func (UnimplementedTransportServerServer) mustEmbedUnimplementedTransportServerServer() {}

// UnsafeTransportServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TransportServerServer will
// result in compilation errors.
type UnsafeTransportServerServer interface {
	mustEmbedUnimplementedTransportServerServer()
}

func RegisterTransportServerServer(s grpc.ServiceRegistrar, srv TransportServerServer) {
	s.RegisterService(&TransportServer_ServiceDesc, srv)
}

func _TransportServer_GetBusSchedule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestBusSchedule)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransportServerServer).GetBusSchedule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/TransportServer/GetBusSchedule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransportServerServer).GetBusSchedule(ctx, req.(*RequestBusSchedule))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransportServer_TrackBusLocation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestBusLocation)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransportServerServer).TrackBusLocation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/TransportServer/TrackBusLocation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransportServerServer).TrackBusLocation(ctx, req.(*RequestBusLocation))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransportServer_ReportTrafficJam_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestTrafficJam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransportServerServer).ReportTrafficJam(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/TransportServer/ReportTrafficJam",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransportServerServer).ReportTrafficJam(ctx, req.(*RequestTrafficJam))
	}
	return interceptor(ctx, in, info, handler)
}

// TransportServer_ServiceDesc is the grpc.ServiceDesc for TransportServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TransportServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "TransportServer",
	HandlerType: (*TransportServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetBusSchedule",
			Handler:    _TransportServer_GetBusSchedule_Handler,
		},
		{
			MethodName: "TrackBusLocation",
			Handler:    _TransportServer_TrackBusLocation_Handler,
		},
		{
			MethodName: "ReportTrafficJam",
			Handler:    _TransportServer_ReportTrafficJam_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "transport.proto",
}
